#include "AgvAlgorithmForklift.h"

//粗糙调节
//距离：[-100mm，100mm]
//车身角度：[-8°,8°]
//角速度增量；[-5, +5]

//距离刻度单位10mm，车身角度刻度单位1°
//row: 17, column: 21

const short crude_table[17][21] = {{   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   1,   1,   1,   1,   1,   0,   0,   0},
                                   {   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   1,   1,   1,   1,   1,  -2,  -2,  -2},
                                   {   5,   5,   5,   5,   5,   5,   3,   3,   2,   2,   2,   2,   2,   1,   1,   0,   0,   0,  -5,  -5,  -5},
                                   {   5,   5,   5,   5,   5,   5,   3,   3,   2,   2,   2,   2,   2,   1,   1,   0,   0,   0,  -5,  -5,  -5},
                                   {   5,   5,   5,   3,   3,   3,   3,   3,   2,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -5,  -5,  -5},
                                   {   5,   5,   5,   3,   3,   3,   3,   3,   2,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -5,  -5,  -5},
                                   {   5,   5,   5,   3,   3,   3,   3,   3,   2,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -5,  -5,  -5},
                                   {   5,   5,   5,   3,   3,   3,   2,   2,   1,   1,   1,   1,   0,  -1,  -1,  -2,  -2,  -2,  -5,  -5,  -5},
                                   {   5,   5,   5,   2,   2,   2,   1,   1,   1,   0,   0,   0,  -1,  -1,  -1,  -2,  -2,  -2,  -5,  -5,  -5},
                                   {   5,   5,   5,   2,   2,   2,   1,   1,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -5,  -5,  -5},
                                   {   5,   5,   5,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -2,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5},
                                   {   5,   5,   5,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -2,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5},
                                   {   5,   5,   5,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -2,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5},
                                   {   5,   5,   5,   0,   0,   0,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5},
                                   {   5,   5,   5,   0,   0,   0,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5},
                                   {   3,   3,   3,  -1,  -1,  -1,  -1,  -1,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5},
                                   {   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                  };

//精确调节
//距离：[-30mm，30mm]
//车身角度：[-5°,5°]
//角速度增量；[-5, +5]

//距离刻度单位2mm，车身角度刻度单位0.2°
//row: 51, column: 31

const short precise_table[51][31] = {{   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,   1,   1,  -3,  -3,  -3,  -3},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   5,   5,   5,   5,   3,   3,   3,   2,   2,   2,   2,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,   0,  -2,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   3,   3,   3,   3,   2,   2,   1,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   3,   3,   3,   3,   2,   2,   2,   2,   1,   1,   1,   1,   1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   2,   2,   2,   2,   1,   1,   1,   1,   1,   1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   2,   2,   2,   2,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   1,   1,   1,   1,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   2,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   5,   5,   5,   5,   1,   0,   0,   0,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   3,   3,   3,   3,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     {   0,   0,   0,   0,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -2,  -2,  -3,  -3,  -3,  -3,  -3,  -3,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5,  -5},
                                     };

////粗糙调节
////距离：[-100mm，100mm]
////车身角度：[-8°,8°]
////舵轮角度：[-30°，30°]

////距离刻度单位10mm，车身角度刻度单位1°
////row: 17, column: 21

//const short crude_table[17][21] = {
//{  30,  30,  30,  30,  30,  30,  30,  30,  20,  20,  20,  20,  15,   7,   7,   7,   7,   7,   0,   0,   0},
//{  30,  30,  30,  30,  30,  30,  23,  23,  17,  17,  17,  17,  15,   7,   7,   5,   5,   5, -15, -15, -15},
//{  30,  30,  30,  30,  30,  30,  20,  20,  15,  15,  15,  15,  15,   7,   7,   0,   0,   0, -30, -30, -30},
//{  30,  30,  30,  30,  30,  30,  20,  20,  15,  15,  15,  15,  15,   7,   7,   0,   0,   0, -30, -30, -30},
//{  30,  30,  30,  20,  20,  20,  20,  20,  15,   7,   7,   7,   7,   0,   0,  -7,  -7,  -7, -30, -30, -30},
//{  30,  30,  30,  20,  20,  20,  20,  20,  15,   7,   7,   7,   7,   0,   0,  -7,  -7,  -7, -30, -30, -30},
//{  30,  30,  30,  20,  20,  20,  20,  20,  15,   7,   7,   7,   7,   0,   0,  -7,  -7,  -7, -30, -30, -30},
//{  30,  30,  30,  20,  20,  20,  15,  15,   7,   7,   7,   7,   0,  -7,  -7, -15, -15, -15, -30, -30, -30},
//{  30,  30,  30,  15,  15,  15,   7,   7,   7,   0,   0,   0,  -7,  -7,  -7, -15, -15, -15, -30, -30, -30},
//{  30,  30,  30,  15,  15,  15,   7,   7,   0,  -7,  -7,  -7,  -7, -15, -15, -20, -20, -20, -30, -30, -30},
//{  30,  30,  30,   7,   7,   7,   0,   0,  -7,  -7,  -7,  -7, -15, -20, -20, -20, -20, -20, -30, -30, -30},
//{  30,  30,  30,   7,   7,   7,   0,   0,  -7,  -7,  -7,  -7, -15, -20, -20, -20, -20, -20, -30, -30, -30},
//{  30,  30,  30,   7,   7,   7,   0,   0,  -7,  -7,  -7,  -7, -15, -20, -20, -20, -20, -20, -30, -30, -30},
//{  30,  30,  30,   0,   0,   0,  -7,  -7, -15, -15, -15, -15, -15, -20, -20, -30, -30, -30, -30, -30, -30},
//{  30,  30,  30,   0,   0,   0,  -7,  -7, -15, -15, -15, -15, -15, -20, -20, -30, -30, -30, -30, -30, -30},
//{  15,  15,  15,  -5,  -5,  -5,  -7,  -7, -15, -17, -17, -17, -17, -23, -23, -30, -30, -30, -30, -30, -30},
//{   0,   0,   0,  -7,  -7,  -7,  -7,  -7, -15, -20, -20, -20, -20, -30, -30, -30, -30, -30, -30, -30, -30}
//};

///*
////精确调节
////距离：[-30mm，30mm]
////车身角度：[-2°,2°]
////舵轮角度：[-10°，10°]

////距离刻度单位2mm，车身角度刻度单位0.2°
////row: 21, column: 31

//const short precise_table[21][31] = {
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   5,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -5,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -6,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -6,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10}
//};

//*/

////精确调节
////距离：[-30mm，30mm]
////车身角度：[-5°,5°]
////舵轮角度：[-10°，10°]

////距离刻度单位2mm，车身角度刻度单位0.2°
////row: 51, column: 31

//const short precise_table[51][31] = {
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   4,   4,   3,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   0},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   5,   5,   5,   5,   5,   4,   4,   3,   2,   2,   2,   2,   2,   2,   1,  -7,  -7,  -7,  -7},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   6,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,  10,  10,  10,  10,   7,   7,   7,   5,   4,   4,   4,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,   0,  -3, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   7,   7,   7,   6,   4,   4,   2,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   5,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   7,   7,   7,   7,   5,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   6,   6,   6,   6,   4,   3,   3,   3,   2,   2,   2,   2,   2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   2,   2,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   2,   2,  -2,  -2,  -2,  -2,  -2,  -3,  -3,  -3,  -4,  -6,  -6,  -6,  -6, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -5,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   4,   4,   4,   4,   3,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -5,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -5,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -6,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -6,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -6,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   2,   2,   2,   2,   2,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -4,  -4,  -5,  -7,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -5,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{  10,  10,  10,  10,   3,   0,   0,   0,  -2,  -2,  -2,  -3,  -4,  -4,  -4,  -4,  -4,  -4,  -4,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{   7,   7,   7,   7,  -1,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -5,  -5,  -5,  -5,  -5,  -6,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//{   0,   0,   0,   0,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -3,  -4,  -4,  -7,  -7,  -7,  -7,  -7,  -7, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10},
//};


/*******************************************************
 * Function Name: limitThrehold
 * Description: This function is used to limit the input variant range.
 *              the variant will limit in the range of [min, max].
 * Input: 1,int* variant, the pointer to the value.
 *        2, int min, the minimum value
 *        3, int max, the maximum value
 * Output: None
 * Others:
 * *****************************************************/
static void limitThrehold(int* variant, int min, int max)
{
    if(*variant < min)
    {
        *variant = min;
    }
    else if(*variant > max)
    {
        *variant = max;
    }
}

CAgvFuzzyForklift::CAgvFuzzyForklift()
{

}

CAgvFuzzyForklift::~CAgvFuzzyForklift()
{

}



int CAgvFuzzyForklift::getValByIndex(int row,int column, ControlType type)
{
    if(PreciseControl == type)
    {
        return precise_table[row][column];
    }
    else
    {
        return crude_table[row][column];
    }
}

/*******************************************************
 * Function Name: output
 * Description: This function is used to calculate the fuzzy output using
 *              the factor of the distance, carangle and the running type.
 * Input: 1,int distance, the distance offset from the current to the target.
 *        2, float carAngle, the angle from the car to the target path.
 *        3, int type, indicate the running type
 * Output: fuzzy output value.
 * Others:
 * *****************************************************/

int CAgvFuzzyForklift::output(int distance, float carAngle, int type)
{
    int output = 0;
    int max_distance = 0;
    float max_carAngle = 0;

    int row = 0;
    int column = 0;

    max_distance = MAX_DISTANCE_CRUDE;
    max_carAngle = MAX_CAR_ANGLE_CRUDE;

    if(distance > max_distance)
    {
        distance = max_distance;
    }
    else if(distance < -max_distance)
    {
        distance = -max_distance;
    }

    if(abs(distance) <= DEAD_ZONE_DISTANCE && fabs(carAngle) <= DEAD_ZONE_ANGLE)
    {
        return 0;
    }
    else if(abs(distance) <= MAX_DISTANCE_PRECISE && fabs(carAngle) <= MAX_ANGLE_PRECISE)
    {
        max_distance = MAX_DISTANCE_PRECISE;
        max_carAngle = MAX_ANGLE_PRECISE;
        row = (int)((carAngle + max_carAngle) * 5);
        column = (int)((distance + max_distance) / 2);
        limitThrehold(&row, 0, (sizeof precise_table / sizeof precise_table[0]) - 1);
        limitThrehold(&column, 0, (sizeof precise_table[0] / sizeof(short)) - 1);
        output = (int)getValByIndex(row, column, PreciseControl);
    }
    else
    {
        if(carAngle < -MAX_CAR_ANGLE_CRUDE && distance >= 0)
        {
            output = MAX_OUTPUT_FOR_CRUDE;
        }
        else if(carAngle > MAX_CAR_ANGLE_CRUDE && distance <= 0)
        {
            output = -MAX_OUTPUT_FOR_CRUDE;
        }
        else
        {
            row = (int)(carAngle + max_carAngle);
            column = (int)((distance + max_distance)/10);
            limitThrehold(&row, 0, (sizeof crude_table / sizeof crude_table[0]) - 1);
            limitThrehold(&column, 0, (sizeof crude_table[0] / sizeof(short)) - 1);
            output = (int)getValByIndex(row, column, CrudeControl);
        }
    }

    printf("row: %d colum: %d output: %d\n", row, column, output);

    return output;
}

CAgvAIForklift::CAgvAIForklift()
{

}

CAgvAIForklift::~CAgvAIForklift()
{

}

/*******************************************************
 * Function Name: output
 * Description: This function is used to calculate the output using
 *              the factor of the offset and the running type.
 *              The output uses the fuzzy algorithm and the pid algorithm.
 * Input: 1,int distance, the distance offset from the current to the target.
 *        2, float carAngle, the angle from the car to the target path.
 *        3, int type, indicate the running type
 * Output: control value.
 * Others:
 * *****************************************************/
int CAgvAIForklift::output(int distance, float carAngle, int type)
{
    CAgvFuzzyForklift fuzzy;
    CAgvPid pid;
    int out = 0;
    int compensation = 0;

    out = fuzzy.output(distance,carAngle, type);
    compensation = pid.output(out, CAgvPid::LOCATION_MODE);

    return compensation;
}
